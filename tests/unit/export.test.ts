/**
 * Unit Tests for Export Logic
 */

import { describe, it, expect } from 'vitest';
import {
  escapeShellArg,
  escapePowerShellArg,
  generateUrlList,
  generateBashCurl,
  generateBashCurlHeaders,
  generateBashYtDlp,
  generatePowerShell,
  generateFilename,
  generateExportContent,
} from '@/background/export';
import type { LogEntry, ExportFormat } from '@/types';

describe('Export Logic', () => {
  const mockEntries: LogEntry[] = [
    {
      id: '1',
      requestId: 'req1',
      url: 'https://example.com/video.m3u8',
      method: 'GET',
      type: 'media',
      tabId: 1,
      frameId: 0,
      timestamp: Date.now(),
      dedupeKey: 'key1',
      headers: {
        'User-Agent': 'Mozilla/5.0',
        Referer: 'https://example.com',
      },
    },
    {
      id: '2',
      requestId: 'req2',
      url: 'https://cdn.example.com/segment.ts',
      method: 'GET',
      type: 'media',
      tabId: 1,
      frameId: 0,
      timestamp: Date.now(),
      dedupeKey: 'key2',
    },
  ];

  describe('escapeShellArg', () => {
    it('should escape single quotes in Bash', () => {
      expect(escapeShellArg("it's a test")).toBe("'it'\\''s a test'");
    });

    it('should wrap argument in single quotes', () => {
      expect(escapeShellArg('simple')).toBe("'simple'");
    });

    it('should handle special characters', () => {
      expect(escapeShellArg('test$variable')).toBe("'test$variable'");
      expect(escapeShellArg('test`command`')).toBe("'test`command`'");
    });
  });

  describe('escapePowerShellArg', () => {
    it('should escape backticks', () => {
      expect(escapePowerShellArg('test`quote')).toBe('test``quote');
    });

    it('should escape dollar signs', () => {
      expect(escapePowerShellArg('test$variable')).toBe('test`$variable');
    });

    it('should escape double quotes', () => {
      expect(escapePowerShellArg('test"quote')).toBe('test`"quote');
    });

    it('should escape newlines and carriage returns', () => {
      expect(escapePowerShellArg('test\nline')).toBe('test`nline');
      expect(escapePowerShellArg('test\rreturn')).toBe('test`rreturn');
    });
  });

  describe('generateUrlList', () => {
    it('should generate plain URL list', () => {
      const result = generateUrlList(mockEntries);
      expect(result).toContain('https://example.com/video.m3u8');
      expect(result).toContain('https://cdn.example.com/segment.ts');
      expect(result.endsWith('\n')).toBe(true);
    });

    it('should separate URLs with newlines', () => {
      const result = generateUrlList(mockEntries);
      const lines = result.trim().split('\n');
      expect(lines).toHaveLength(2);
    });
  });

  describe('generateBashCurl', () => {
    it('should generate Bash curl script', () => {
      const result = generateBashCurl(mockEntries);
      expect(result).toContain('#!/bin/bash');
      expect(result).toContain('# Generated by WebreqSniffer');
      expect(result).toContain("curl -L 'https://example.com/video.m3u8'");
      expect(result).toContain("curl -L 'https://cdn.example.com/segment.ts'");
    });

    it('should escape URLs properly', () => {
      const entries: LogEntry[] = [
        {
          ...mockEntries[0],
          url: "https://example.com/test's",
        },
      ];
      const result = generateBashCurl(entries);
      expect(result).toContain("curl -L 'https://example.com/test'\\''s'");
    });
  });

  describe('generateBashCurlHeaders', () => {
    it('should generate Bash curl with headers', () => {
      const result = generateBashCurlHeaders(mockEntries);
      expect(result).toContain('#!/bin/bash');
      expect(result).toContain('-H');
      expect(result).toContain('User-Agent: Mozilla/5.0');
      expect(result).toContain('Referer: https://example.com');
    });

    it('should handle entries without headers', () => {
      const result = generateBashCurlHeaders(mockEntries);
      expect(result).toContain("curl -L 'https://cdn.example.com/segment.ts'");
    });
  });

  describe('generateBashYtDlp', () => {
    it('should generate Bash yt-dlp script', () => {
      const result = generateBashYtDlp(mockEntries);
      expect(result).toContain('#!/bin/bash');
      expect(result).toContain('yt-dlp');
      expect(result).toContain('--add-header');
      expect(result).toContain('User-Agent: Mozilla/5.0');
    });

    it('should add referer flag when present', () => {
      const result = generateBashYtDlp(mockEntries);
      expect(result).toContain('--referer');
      expect(result).toContain("'https://example.com'");
    });

    it('should handle entries without headers', () => {
      const result = generateBashYtDlp([mockEntries[1]]);
      expect(result).toContain('yt-dlp');
      expect(result).toContain("'https://cdn.example.com/segment.ts'");
    });
  });

  describe('generatePowerShell', () => {
    it('should generate PowerShell script', () => {
      const result = generatePowerShell(mockEntries);
      expect(result).toContain('# Generated by WebreqSniffer');
      expect(result).toContain('$ProgressPreference = "SilentlyContinue"');
      expect(result).toContain('Invoke-WebRequest');
    });

    it('should include headers when present', () => {
      const result = generatePowerShell(mockEntries);
      expect(result).toContain('$headers = @{');
      expect(result).toContain('"User-Agent"');
      expect(result).toContain('"Mozilla/5.0"');
    });

    it('should escape special characters for PowerShell', () => {
      const entries: LogEntry[] = [
        {
          ...mockEntries[0],
          url: 'https://example.com/test$var',
        },
      ];
      const result = generatePowerShell(entries);
      expect(result).toContain('test`$var');
    });
  });

  describe('generateFilename', () => {
    it('should replace {date} placeholder', () => {
      const filename = generateFilename('log_{date}.txt', 'url-list', mockEntries);
      expect(filename).toMatch(/log_\d{4}-\d{2}-\d{2}\.txt/);
    });

    it('should replace {domain} placeholder', () => {
      const filename = generateFilename('log_{domain}.txt', 'url-list', mockEntries);
      expect(filename).toBe('log_example.com.txt');
    });

    it('should replace {ext} placeholder based on format', () => {
      expect(generateFilename('log.{ext}', 'url-list', mockEntries)).toBe('log.txt');
      expect(generateFilename('log.{ext}', 'bash-curl', mockEntries)).toBe('log.sh');
      expect(generateFilename('log.{ext}', 'powershell', mockEntries)).toBe('log.ps1');
    });

    it('should handle all placeholders together', () => {
      const filename = generateFilename('netlog_{date}_{domain}.{ext}', 'bash-curl', mockEntries);
      expect(filename).toMatch(/netlog_\d{4}-\d{2}-\d{2}_example\.com\.sh/);
    });

    it('should sanitize domain names', () => {
      const entries: LogEntry[] = [
        {
          ...mockEntries[0],
          url: 'https://sub-domain.example.com/test',
        },
      ];
      const filename = generateFilename('log_{domain}.txt', 'url-list', entries);
      expect(filename).toBe('log_sub-domain.example.com.txt');
    });

    it('should replace {time} placeholder', () => {
      const filename = generateFilename('log_{time}.txt', 'url-list', mockEntries);
      expect(filename).toMatch(/log_\d{2}-\d{2}-\d{2}\.txt/);
    });

    it('should replace {timestamp} placeholder', () => {
      const filename = generateFilename('log_{timestamp}.txt', 'url-list', mockEntries);
      expect(filename).toMatch(/log_\d+\.txt/);
    });

    it('should replace {pageTitle} placeholder when metadata present', () => {
      const entries: LogEntry[] = [
        {
          ...mockEntries[0],
          pageMetadata: {
            pageTitle: 'My Video Page',
          },
        },
      ];
      const filename = generateFilename('{pageTitle}.txt', 'url-list', entries);
      expect(filename).toBe('My_Video_Page.txt');
    });

    it('should replace {ogTitle} placeholder when metadata present', () => {
      const entries: LogEntry[] = [
        {
          ...mockEntries[0],
          pageMetadata: {
            pageTitle: 'Page Title',
            ogTitle: 'Open Graph Title',
          },
        },
      ];
      const filename = generateFilename('{ogTitle}.txt', 'url-list', entries);
      expect(filename).toBe('Open_Graph_Title.txt');
    });

    it('should replace {videoTitle} placeholder when metadata present', () => {
      const entries: LogEntry[] = [
        {
          ...mockEntries[0],
          pageMetadata: {
            pageTitle: 'Page Title',
            ogTitle: 'OG Title',
            videoTitle: 'Actual Video Title',
          },
        },
      ];
      const filename = generateFilename('{videoTitle}.txt', 'url-list', entries);
      expect(filename).toBe('Actual_Video_Title.txt');
    });

    it('should replace {metaTitle} placeholder when metadata present', () => {
      const entries: LogEntry[] = [
        {
          ...mockEntries[0],
          pageMetadata: {
            pageTitle: 'Page Title',
            metaTitle: 'Meta Title Tag',
          },
        },
      ];
      const filename = generateFilename('{metaTitle}.txt', 'url-list', entries);
      expect(filename).toBe('Meta_Title_Tag.txt');
    });

    it('should use "untitled" fallback when no metadata present', () => {
      const filename = generateFilename(
        '{pageTitle | default("untitled")}_{videoTitle | default("untitled")}.txt',
        'url-list',
        mockEntries
      );
      expect(filename).toBe('untitled_untitled.txt');
    });

    it('should use cascading fallback for {videoTitle}', () => {
      const entriesWithOgTitle: LogEntry[] = [
        {
          ...mockEntries[0],
          pageMetadata: {
            pageTitle: 'Page Title',
            ogTitle: 'OG Title',
            // no videoTitle
          },
        },
      ];
      const filename1 = generateFilename('{videoTitle}.txt', 'url-list', entriesWithOgTitle);
      expect(filename1).toBe('OG_Title.txt');

      const entriesWithPageTitle: LogEntry[] = [
        {
          ...mockEntries[0],
          pageMetadata: {
            pageTitle: 'Page Title',
            // no ogTitle, no videoTitle
          },
        },
      ];
      const filename2 = generateFilename('{videoTitle}.txt', 'url-list', entriesWithPageTitle);
      expect(filename2).toBe('Page_Title.txt');
    });

    it('should use cascading fallback for {ogTitle}', () => {
      const entries: LogEntry[] = [
        {
          ...mockEntries[0],
          pageMetadata: {
            pageTitle: 'Page Title',
            // no ogTitle
          },
        },
      ];
      const filename = generateFilename('{ogTitle}.txt', 'url-list', entries);
      expect(filename).toBe('Page_Title.txt');
    });

    it('should use cascading fallback for {metaTitle}', () => {
      const entries: LogEntry[] = [
        {
          ...mockEntries[0],
          pageMetadata: {
            pageTitle: 'Page Title',
            // no metaTitle
          },
        },
      ];
      const filename = generateFilename('{metaTitle}.txt', 'url-list', entries);
      expect(filename).toBe('Page_Title.txt');
    });

    it('should sanitize special characters in metadata titles', () => {
      const entries: LogEntry[] = [
        {
          ...mockEntries[0],
          pageMetadata: {
            pageTitle: 'Video: "Best Tutorial" (2024) | Part 1/5',
          },
        },
      ];
      const filename = generateFilename('{pageTitle}.txt', 'url-list', entries);
      // Parentheses, pipes and colons are replaced with underscores
      expect(filename).toBe('Video_Best_Tutorial_2024_Part_1_5.txt');
    });

    it('should handle all placeholders including metadata', () => {
      const entries: LogEntry[] = [
        {
          ...mockEntries[0],
          pageMetadata: {
            pageTitle: 'My Video',
            videoTitle: 'Cool Tutorial',
          },
        },
      ];
      const filename = generateFilename('{date}_{domain}_{videoTitle}.{ext}', 'bash-curl', entries);
      expect(filename).toMatch(/\d{4}-\d{2}-\d{2}_example\.com_Cool_Tutorial\.sh/);
    });

    it('should sanitize final filename', () => {
      const entries: LogEntry[] = [
        {
          ...mockEntries[0],
          pageMetadata: {
            pageTitle: 'Test<>File||Name',
          },
        },
      ];
      const filename = generateFilename('{pageTitle}.txt', 'url-list', entries);
      // Multiple underscores are collapsed to single underscore
      expect(filename).toBe('Test_File_Name.txt');
    });
  });

  describe('generateExportContent', () => {
    it('should generate URL list format', async () => {
      const content = await generateExportContent(mockEntries, 'url-list');
      expect(content).toContain('https://example.com/video.m3u8');
    });

    it('should generate Bash curl format', async () => {
      const content = await generateExportContent(mockEntries, 'bash-curl');
      expect(content).toContain('#!/bin/bash');
      expect(content).toContain('curl');
    });

    it('should generate Bash curl with headers format', async () => {
      const content = await generateExportContent(mockEntries, 'bash-curl-headers');
      expect(content).toContain('-H');
    });

    it('should generate Bash yt-dlp format', async () => {
      const content = await generateExportContent(mockEntries, 'bash-yt-dlp');
      expect(content).toContain('yt-dlp');
    });

    it('should generate PowerShell format', async () => {
      const content = await generateExportContent(mockEntries, 'powershell');
      expect(content).toContain('Invoke-WebRequest');
    });

    it('should throw error for unknown format', async () => {
      await expect(generateExportContent(mockEntries, 'unknown' as ExportFormat)).rejects.toThrow(
        'Template not found for format'
      );
    });
  });
});
