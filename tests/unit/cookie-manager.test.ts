/**
 * Unit tests for cookie manager
 */

import { describe, it, expect } from 'vitest';
import type { CookieInfo } from '@/lib/cookie-manager';
import { generateNetscapeCookieJar, generateJsonCookieFormat } from '@/lib/cookie-manager';

/**
 * Helper: Create mock cookie
 */
function createMockCookie(overrides: Partial<CookieInfo> = {}): CookieInfo {
  return {
    name: 'session_id',
    value: 'abc123def456',
    domain: '.example.com',
    path: '/',
    secure: true,
    httpOnly: true,
    hostOnly: false,
    ...overrides,
  };
}

describe('generateNetscapeCookieJar', () => {
  it('should generate header for empty cookie list', () => {
    const result = generateNetscapeCookieJar([]);

    expect(result).toContain('# Netscape HTTP Cookie File');
    expect(result).toContain('# This file was generated by WebreqSniffer');
    expect(result).toContain('# No cookies available');
  });

  it('should generate Netscape format for single cookie', () => {
    // Use future timestamp (10 years from now)
    const futureTimestamp = Math.floor(Date.now() / 1000) + 10 * 365 * 24 * 60 * 60;
    const cookies: CookieInfo[] = [
      createMockCookie({
        name: 'session_id',
        value: 'abc123',
        domain: '.example.com',
        path: '/',
        secure: true,
        httpOnly: true,
        expirationDate: futureTimestamp,
      }),
    ];

    const result = generateNetscapeCookieJar(cookies);

    expect(result).toContain('# Netscape HTTP Cookie File');
    expect(result).toContain(`.example.com\tTRUE\t/\tTRUE\t${futureTimestamp}\tsession_id\tabc123`);
  });

  it('should use TRUE flag for domains starting with dot', () => {
    const cookies: CookieInfo[] = [
      createMockCookie({
        domain: '.example.com',
      }),
    ];

    const result = generateNetscapeCookieJar(cookies);

    expect(result).toMatch(/\.example\.com\s+TRUE/);
  });

  it('should use FALSE flag for domains without dot', () => {
    const cookies: CookieInfo[] = [
      createMockCookie({
        domain: 'example.com',
      }),
    ];

    const result = generateNetscapeCookieJar(cookies);

    expect(result).toMatch(/example\.com\s+FALSE/);
  });

  it('should handle secure flag correctly', () => {
    const futureTimestamp = Math.floor(Date.now() / 1000) + 10 * 365 * 24 * 60 * 60;
    const cookies: CookieInfo[] = [
      createMockCookie({
        secure: true,
        expirationDate: futureTimestamp,
      }),
      createMockCookie({
        name: 'insecure',
        secure: false,
        expirationDate: futureTimestamp,
      }),
    ];

    const result = generateNetscapeCookieJar(cookies);

    expect(result).toContain(`\tTRUE\t${futureTimestamp}\tsession_id\t`);
    expect(result).toContain(`\tFALSE\t${futureTimestamp}\tinsecure\t`);
  });

  it('should filter out expired cookies', () => {
    const now = Math.floor(Date.now() / 1000);
    const cookies: CookieInfo[] = [
      createMockCookie({
        name: 'valid',
        expirationDate: now + 3600, // 1 hour from now
      }),
      createMockCookie({
        name: 'expired',
        expirationDate: now - 3600, // 1 hour ago
      }),
    ];

    const result = generateNetscapeCookieJar(cookies);

    expect(result).toContain('valid');
    expect(result).not.toContain('expired');
  });

  it('should use far future date for cookies without expiration', () => {
    const cookies: CookieInfo[] = [
      createMockCookie({
        name: 'session',
        expirationDate: undefined,
      }),
    ];

    const result = generateNetscapeCookieJar(cookies);

    // Should have a large expiration timestamp (10 years from now)
    expect(result).toContain('session');
    expect(result).toMatch(/session\s+\w+$/m); // Has value at the end
  });

  it('should handle multiple cookies', () => {
    const futureTimestamp = Math.floor(Date.now() / 1000) + 10 * 365 * 24 * 60 * 60;
    const cookies: CookieInfo[] = [
      createMockCookie({
        name: 'cookie1',
        value: 'value1',
        expirationDate: futureTimestamp,
      }),
      createMockCookie({
        name: 'cookie2',
        value: 'value2',
        expirationDate: futureTimestamp + 1000,
      }),
    ];

    const result = generateNetscapeCookieJar(cookies);

    expect(result).toContain('cookie1\tvalue1');
    expect(result).toContain('cookie2\tvalue2');
  });

  it('should handle special characters in cookie values', () => {
    const futureTimestamp = Math.floor(Date.now() / 1000) + 10 * 365 * 24 * 60 * 60;
    const cookies: CookieInfo[] = [
      createMockCookie({
        name: 'special',
        value: 'value with spaces and=signs',
        expirationDate: futureTimestamp,
      }),
    ];

    const result = generateNetscapeCookieJar(cookies);

    expect(result).toContain('special\tvalue with spaces and=signs');
  });
});

describe('generateJsonCookieFormat', () => {
  it('should generate empty array for no cookies', () => {
    const result = generateJsonCookieFormat([]);
    const parsed = JSON.parse(result);

    expect(Array.isArray(parsed)).toBe(true);
    expect(parsed.length).toBe(0);
  });

  it('should generate valid JSON for single cookie', () => {
    const futureTimestamp = Math.floor(Date.now() / 1000) + 10 * 365 * 24 * 60 * 60;
    const cookies: CookieInfo[] = [
      createMockCookie({
        name: 'test',
        value: 'value123',
        domain: '.example.com',
        path: '/',
        secure: true,
        httpOnly: true,
        expirationDate: futureTimestamp,
      }),
    ];

    const result = generateJsonCookieFormat(cookies);
    const parsed = JSON.parse(result);

    expect(parsed).toHaveLength(1);
    expect(parsed[0]).toEqual({
      name: 'test',
      value: 'value123',
      domain: '.example.com',
      path: '/',
      secure: true,
      httpOnly: true,
      hostOnly: false,
      expirationDate: futureTimestamp,
    });
  });

  it('should filter out expired cookies', () => {
    const now = Math.floor(Date.now() / 1000);
    const cookies: CookieInfo[] = [
      createMockCookie({
        name: 'valid',
        expirationDate: now + 3600,
      }),
      createMockCookie({
        name: 'expired',
        expirationDate: now - 3600,
      }),
    ];

    const result = generateJsonCookieFormat(cookies);
    const parsed = JSON.parse(result);

    expect(parsed).toHaveLength(1);
    expect(parsed[0].name).toBe('valid');
  });

  it('should include all cookie fields', () => {
    const futureTimestamp = Math.floor(Date.now() / 1000) + 10 * 365 * 24 * 60 * 60;
    const cookies: CookieInfo[] = [
      createMockCookie({
        name: 'full_cookie',
        value: 'abc123',
        domain: '.example.com',
        path: '/api',
        secure: true,
        httpOnly: false,
        sameSite: 'lax',
        expirationDate: futureTimestamp,
        hostOnly: false,
      }),
    ];

    const result = generateJsonCookieFormat(cookies);
    const parsed = JSON.parse(result);

    expect(parsed[0]).toHaveProperty('name', 'full_cookie');
    expect(parsed[0]).toHaveProperty('value', 'abc123');
    expect(parsed[0]).toHaveProperty('domain', '.example.com');
    expect(parsed[0]).toHaveProperty('path', '/api');
    expect(parsed[0]).toHaveProperty('secure', true);
    expect(parsed[0]).toHaveProperty('httpOnly', false);
    expect(parsed[0]).toHaveProperty('sameSite', 'lax');
    expect(parsed[0]).toHaveProperty('expirationDate', futureTimestamp);
    expect(parsed[0]).toHaveProperty('hostOnly', false);
  });

  it('should handle cookies without sameSite', () => {
    const cookies: CookieInfo[] = [
      {
        name: 'no_samesite',
        value: 'value',
        domain: '.example.com',
        path: '/',
        secure: false,
        httpOnly: false,
        hostOnly: false,
      },
    ];

    const result = generateJsonCookieFormat(cookies);
    const parsed = JSON.parse(result);

    expect(parsed[0]).toHaveProperty('name', 'no_samesite');
    expect(parsed[0].sameSite).toBeUndefined();
  });
});
