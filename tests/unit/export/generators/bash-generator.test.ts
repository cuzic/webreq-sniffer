/**
 * Unit Tests for Bash Generator
 */

import { describe, it, expect } from 'vitest';
import {
  generateBashCurl,
  generateBashCurlHeaders,
  generateBashYtDlp,
  generateBashYtDlpWithCookies,
} from '@/lib/export/generators/bash-generator';
import type { LogEntry } from '@/types';

describe('Bash Generator', () => {
  const mockEntries: LogEntry[] = [
    {
      id: '1',
      requestId: 'req1',
      url: 'https://example.com/video.m3u8',
      method: 'GET',
      type: 'media',
      tabId: 1,
      frameId: 0,
      timestamp: Date.now(),
      dedupeKey: 'key1',
      headers: {
        'User-Agent': 'Mozilla/5.0',
        Referer: 'https://example.com',
      },
    },
    {
      id: '2',
      requestId: 'req2',
      url: 'https://cdn.example.com/segment.ts',
      method: 'GET',
      type: 'media',
      tabId: 1,
      frameId: 0,
      timestamp: Date.now(),
      dedupeKey: 'key2',
    },
  ];

  describe('generateBashCurl', () => {
    it('should generate Bash curl script', () => {
      const result = generateBashCurl(mockEntries);
      expect(result).toContain('#!/bin/bash');
      expect(result).toContain('# Generated by WebreqSniffer');
      expect(result).toContain("curl -L 'https://example.com/video.m3u8'");
      expect(result).toContain("curl -L 'https://cdn.example.com/segment.ts'");
    });

    it('should escape URLs properly', () => {
      const entries: LogEntry[] = [
        {
          ...mockEntries[0],
          url: "https://example.com/test's",
        },
      ];
      const result = generateBashCurl(entries);
      expect(result).toContain("curl -L 'https://example.com/test'\\''s'");
    });

    it('should end with newline', () => {
      const result = generateBashCurl(mockEntries);
      expect(result.endsWith('\n')).toBe(true);
    });

    it('should handle empty entries', () => {
      const result = generateBashCurl([]);
      expect(result).toContain('#!/bin/bash');
      expect(result).toContain('# Generated by WebreqSniffer');
    });
  });

  describe('generateBashCurlHeaders', () => {
    it('should generate Bash curl with headers', () => {
      const result = generateBashCurlHeaders(mockEntries);
      expect(result).toContain('#!/bin/bash');
      expect(result).toContain('-H');
      expect(result).toContain('User-Agent: Mozilla/5.0');
      expect(result).toContain('Referer: https://example.com');
    });

    it('should handle entries without headers', () => {
      const result = generateBashCurlHeaders(mockEntries);
      expect(result).toContain("curl -L 'https://cdn.example.com/segment.ts'");
    });

    it('should properly format header flags', () => {
      const result = generateBashCurlHeaders([mockEntries[0]]);
      expect(result).toMatch(/-H '[^']+'/);
    });
  });

  describe('generateBashYtDlp', () => {
    it('should generate Bash yt-dlp script', () => {
      const result = generateBashYtDlp(mockEntries);
      expect(result).toContain('#!/bin/bash');
      expect(result).toContain('yt-dlp');
      expect(result).toContain('--add-header');
      expect(result).toContain('User-Agent: Mozilla/5.0');
    });

    it('should add referer flag when present', () => {
      const result = generateBashYtDlp(mockEntries);
      expect(result).toContain('--referer');
      expect(result).toContain("'https://example.com'");
    });

    it('should handle entries without headers', () => {
      const result = generateBashYtDlp([mockEntries[1]]);
      expect(result).toContain('yt-dlp');
      expect(result).toContain("'https://cdn.example.com/segment.ts'");
    });

    it('should escape special characters in URLs', () => {
      const entries: LogEntry[] = [
        {
          ...mockEntries[0],
          url: "https://example.com/test's",
        },
      ];
      const result = generateBashYtDlp(entries);
      expect(result).toContain("'https://example.com/test'\\''s'");
    });
  });

  describe('generateBashYtDlpWithCookies', () => {
    it('should generate Bash yt-dlp script with cookie placeholder', async () => {
      const result = await generateBashYtDlpWithCookies(mockEntries);
      expect(result).toContain('#!/bin/bash');
      expect(result).toContain('yt-dlp');
    });

    it('should handle empty entries', async () => {
      const result = await generateBashYtDlpWithCookies([]);
      expect(result).toContain('#!/bin/bash');
      expect(result).toContain('# Generated by WebreqSniffer');
    });
  });
});
