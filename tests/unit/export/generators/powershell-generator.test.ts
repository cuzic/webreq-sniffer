/**
 * Unit Tests for PowerShell Generator
 */

import { describe, it, expect } from 'vitest';
import { generatePowerShell } from '@/lib/export/generators/powershell-generator';
import type { LogEntry } from '@/types';

describe('PowerShell Generator', () => {
  const mockEntries: LogEntry[] = [
    {
      id: '1',
      requestId: 'req1',
      url: 'https://example.com/video.m3u8',
      method: 'GET',
      type: 'media',
      tabId: 1,
      frameId: 0,
      timestamp: Date.now(),
      dedupeKey: 'key1',
      headers: {
        'User-Agent': 'Mozilla/5.0',
        Referer: 'https://example.com',
      },
    },
    {
      id: '2',
      requestId: 'req2',
      url: 'https://cdn.example.com/segment.ts',
      method: 'GET',
      type: 'media',
      tabId: 1,
      frameId: 0,
      timestamp: Date.now(),
      dedupeKey: 'key2',
    },
  ];

  describe('generatePowerShell', () => {
    it('should generate PowerShell script', () => {
      const result = generatePowerShell(mockEntries);
      expect(result).toContain('# Generated by WebreqSniffer');
      expect(result).toContain('$ProgressPreference = "SilentlyContinue"');
      expect(result).toContain('Invoke-WebRequest');
    });

    it('should include headers when present', () => {
      const result = generatePowerShell(mockEntries);
      expect(result).toContain('$headers = @{');
      expect(result).toContain('"User-Agent"');
      expect(result).toContain('"Mozilla/5.0"');
    });

    it('should escape special characters for PowerShell', () => {
      const entries: LogEntry[] = [
        {
          ...mockEntries[0],
          url: 'https://example.com/test$var',
        },
      ];
      const result = generatePowerShell(entries);
      expect(result).toContain('test`$var');
    });

    it('should handle entries without headers', () => {
      const result = generatePowerShell([mockEntries[1]]);
      expect(result).toContain('Invoke-WebRequest');
      expect(result).not.toContain('$headers');
    });

    it('should number requests in comments', () => {
      const result = generatePowerShell(mockEntries);
      expect(result).toContain('# Request 1');
      expect(result).toContain('# Request 2');
    });

    it('should handle empty entries', () => {
      const result = generatePowerShell([]);
      expect(result).toContain('# Generated by WebreqSniffer');
      expect(result).toContain('$ProgressPreference');
    });

    it('should escape backticks in URLs', () => {
      const entries: LogEntry[] = [
        {
          ...mockEntries[0],
          url: 'https://example.com/test`cmd',
        },
      ];
      const result = generatePowerShell(entries);
      expect(result).toContain('test``cmd');
    });
  });
});
