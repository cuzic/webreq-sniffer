/**
 * Unit Tests for Template Method Pattern
 * Testing TDD approach for Issue #64 Priority 5
 */

import { describe, it, expect, beforeEach } from 'vitest';
import {
  ScriptGenerator,
  BashCurlScriptGenerator,
  BashYtDlpScriptGenerator,
  PowerShellScriptGenerator,
} from '@/lib/export/generators/script-generator-template';
import type { LogEntry } from '@/types';

describe('Script Generator Template Method Pattern', () => {
  let mockEntries: LogEntry[];

  beforeEach(() => {
    mockEntries = [
      {
        id: '1',
        requestId: 'req-1',
        url: 'https://example.com/video.m3u8',
        method: 'GET',
        type: 'media',
        tabId: 1,
        frameId: 0,
        timestamp: Date.now(),
        dedupeKey: 'key1',
        headers: {
          'User-Agent': 'Mozilla/5.0',
          Referer: 'https://example.com/page',
        },
      },
      {
        id: '2',
        requestId: 'req-2',
        url: 'https://example.com/audio.mp3',
        method: 'GET',
        type: 'media',
        tabId: 1,
        frameId: 0,
        timestamp: Date.now(),
        dedupeKey: 'key2',
      },
    ];
  });

  describe('ScriptGenerator base class', () => {
    it('should define template method', () => {
      // Create a concrete implementation for testing
      class TestGenerator extends ScriptGenerator {
        protected generateHeader(): string[] {
          return ['# Test Header'];
        }
        protected processEntry(entry: LogEntry, index: number): string[] {
          return [`# Entry ${index}`];
        }
      }

      const generator = new TestGenerator();
      expect(generator.generate).toBeDefined();
      expect(typeof generator.generate).toBe('function');
    });

    it('should execute template method in correct order', () => {
      const executionOrder: string[] = [];

      class TestGenerator extends ScriptGenerator {
        protected generateHeader(): string[] {
          executionOrder.push('header');
          return ['# Header'];
        }
        protected processEntry(entry: LogEntry, index: number): string[] {
          executionOrder.push(`entry-${index}`);
          return [`# Entry ${index}`];
        }
      }

      const generator = new TestGenerator();
      generator.generate(mockEntries);

      expect(executionOrder).toEqual(['header', 'entry-0', 'entry-1']);
    });

    it('should handle empty entries array', () => {
      class TestGenerator extends ScriptGenerator {
        protected generateHeader(): string[] {
          return ['# Header'];
        }
        protected processEntry(): string[] {
          return [];
        }
      }

      const generator = new TestGenerator();
      const result = generator.generate([]);

      expect(result).toBe('# Header\n');
    });
  });

  describe('BashCurlScriptGenerator', () => {
    it('should generate bash curl script', () => {
      const generator = new BashCurlScriptGenerator();
      const result = generator.generate(mockEntries);

      expect(result).toContain('#!/bin/bash');
      expect(result).toContain('# Generated by WebreqSniffer');
      expect(result).toContain('curl -L');
      expect(result).toContain('https://example.com/video.m3u8');
      expect(result).toContain('https://example.com/audio.mp3');
    });

    it('should escape URLs properly', () => {
      const entries: LogEntry[] = [
        {
          ...mockEntries[0],
          url: "https://example.com/video's.m3u8",
        },
      ];

      const generator = new BashCurlScriptGenerator();
      const result = generator.generate(entries);

      expect(result).toContain("'https://example.com/video'\\''s.m3u8'");
    });

    it('should include headers when configured', () => {
      const generator = new BashCurlScriptGenerator({ includeHeaders: true });
      const result = generator.generate(mockEntries);

      expect(result).toContain('-H');
      expect(result).toContain('User-Agent: Mozilla/5.0');
      expect(result).toContain('Referer: https://example.com/page');
    });

    it('should not include headers when not configured', () => {
      const generator = new BashCurlScriptGenerator({ includeHeaders: false });
      const result = generator.generate(mockEntries);

      expect(result).not.toContain('-H');
      expect(result).not.toContain('User-Agent');
    });
  });

  describe('BashYtDlpScriptGenerator', () => {
    it('should generate bash yt-dlp script', () => {
      const generator = new BashYtDlpScriptGenerator();
      const result = generator.generate(mockEntries);

      expect(result).toContain('#!/bin/bash');
      expect(result).toContain('yt-dlp');
      expect(result).toContain('https://example.com/video.m3u8');
    });

    it('should include headers with --add-header flag', () => {
      const generator = new BashYtDlpScriptGenerator();
      const result = generator.generate(mockEntries);

      expect(result).toContain('--add-header');
      expect(result).toContain('User-Agent: Mozilla/5.0');
    });

    it('should add referer flag when present', () => {
      const generator = new BashYtDlpScriptGenerator();
      const result = generator.generate(mockEntries);

      expect(result).toContain('--referer');
      expect(result).toContain("'https://example.com/page'");
    });

    it('should handle entries without headers', () => {
      const generator = new BashYtDlpScriptGenerator();
      const result = generator.generate([mockEntries[1]]);

      expect(result).toContain('yt-dlp');
      expect(result).toContain('https://example.com/audio.mp3');
      expect(result).not.toContain('--add-header');
    });
  });

  describe('PowerShellScriptGenerator', () => {
    it('should generate PowerShell script', () => {
      const generator = new PowerShellScriptGenerator();
      const result = generator.generate(mockEntries);

      expect(result).toContain('# Generated by WebreqSniffer');
      expect(result).toContain('$ProgressPreference = "SilentlyContinue"');
      expect(result).toContain('Invoke-WebRequest');
    });

    it('should include headers when present', () => {
      const generator = new PowerShellScriptGenerator();
      const result = generator.generate(mockEntries);

      expect(result).toContain('$headers = @{');
      expect(result).toContain('"User-Agent"');
      expect(result).toContain('"Mozilla/5.0"');
    });

    it('should escape PowerShell special characters', () => {
      const entries: LogEntry[] = [
        {
          ...mockEntries[0],
          url: 'https://example.com/test$var',
        },
      ];

      const generator = new PowerShellScriptGenerator();
      const result = generator.generate(entries);

      expect(result).toContain('test`$var');
    });

    it('should handle entries without headers', () => {
      const generator = new PowerShellScriptGenerator();
      const result = generator.generate([mockEntries[1]]);

      expect(result).toContain('Invoke-WebRequest -Uri');
      expect(result).not.toContain('$headers');
    });

    it('should add request comments', () => {
      const generator = new PowerShellScriptGenerator();
      const result = generator.generate(mockEntries);

      expect(result).toContain('# Request 1');
      expect(result).toContain('# Request 2');
    });
  });

  describe('Template method customization', () => {
    it('should allow subclasses to provide custom headers', () => {
      class CustomGenerator extends ScriptGenerator {
        protected generateHeader(): string[] {
          return ['# Custom Script', '# Author: Test', ''];
        }
        protected processEntry(entry: LogEntry): string[] {
          return [`echo ${entry.url}`];
        }
      }

      const generator = new CustomGenerator();
      const result = generator.generate(mockEntries);

      expect(result).toContain('# Custom Script');
      expect(result).toContain('# Author: Test');
    });

    it('should allow subclasses to add footer', () => {
      class GeneratorWithFooter extends ScriptGenerator {
        protected generateHeader(): string[] {
          return ['# Header'];
        }
        protected processEntry(entry: LogEntry): string[] {
          return [`echo ${entry.url}`];
        }
        protected generateFooter(): string[] {
          return ['', '# End of script'];
        }
      }

      const generator = new GeneratorWithFooter();
      const result = generator.generate(mockEntries);

      expect(result).toContain('# End of script');
      expect(result.trim().endsWith('# End of script')).toBe(true);
    });
  });

  describe('Hook methods', () => {
    it('should call beforeGenerate hook', () => {
      let hookCalled = false;

      class TestGenerator extends ScriptGenerator {
        protected beforeGenerate(entries: LogEntry[]): void {
          hookCalled = true;
          expect(entries).toHaveLength(2);
        }
        protected generateHeader(): string[] {
          return ['# Header'];
        }
        protected processEntry(): string[] {
          return [];
        }
      }

      const generator = new TestGenerator();
      generator.generate(mockEntries);

      expect(hookCalled).toBe(true);
    });

    it('should call afterGenerate hook', () => {
      let hookCalled = false;

      class TestGenerator extends ScriptGenerator {
        protected generateHeader(): string[] {
          return ['# Header'];
        }
        protected processEntry(): string[] {
          return [];
        }
        protected afterGenerate(result: string): void {
          hookCalled = true;
          expect(result).toBeDefined();
        }
      }

      const generator = new TestGenerator();
      generator.generate(mockEntries);

      expect(hookCalled).toBe(true);
    });
  });

  describe('Backward compatibility', () => {
    it('should produce same output as old bash curl generator', () => {
      const generator = new BashCurlScriptGenerator({ includeHeaders: false });
      const result = generator.generate(mockEntries);

      // Should have same structure
      const lines = result.split('\n').filter((l) => l.trim());
      expect(lines[0]).toBe('#!/bin/bash');
      expect(lines[1]).toBe('# Generated by WebreqSniffer');
      expect(lines[2]).toContain('curl -L');
    });

    it('should produce same output as old yt-dlp generator', () => {
      const generator = new BashYtDlpScriptGenerator();
      const result = generator.generate(mockEntries);

      expect(result).toContain('#!/bin/bash');
      expect(result).toContain('yt-dlp');
      expect(result).toContain('--add-header');
    });

    it('should produce same output as old PowerShell generator', () => {
      const generator = new PowerShellScriptGenerator();
      const result = generator.generate(mockEntries);

      expect(result).toContain('$ProgressPreference = "SilentlyContinue"');
      expect(result).toContain('Invoke-WebRequest');
    });
  });
});
