/**
 * Cookie Manager
 * Handles cookie collection and Netscape format generation for authenticated downloads
 */

import { Logger } from './logger';

/**
 * Cookie information from Chrome
 * Based on chrome.cookies.Cookie
 */
export interface CookieInfo {
  name: string;
  value: string;
  domain: string;
  path: string;
  secure: boolean;
  httpOnly: boolean;
  sameSite?: 'no_restriction' | 'lax' | 'strict' | 'unspecified';
  expirationDate?: number; // Unix timestamp
  hostOnly: boolean;
}

/**
 * Get all cookies for a given URL
 * @param url Target URL to get cookies for
 * @returns Array of cookies
 */
export async function getCookiesForUrl(url: string): Promise<CookieInfo[]> {
  try {
    const cookies = await chrome.cookies.getAll({ url });

    return cookies.map((cookie) => ({
      name: cookie.name,
      value: cookie.value,
      domain: cookie.domain,
      path: cookie.path,
      secure: cookie.secure,
      httpOnly: cookie.httpOnly,
      sameSite: cookie.sameSite,
      expirationDate: cookie.expirationDate,
      hostOnly: cookie.hostOnly,
    }));
  } catch (error) {
    Logger.error('cookie-manager', error, { url });
    return [];
  }
}

/**
 * Generate Netscape cookie jar format
 * Compatible with curl, wget, yt-dlp
 *
 * Format:
 * domain  flag  path  secure  expiration  name  value
 *
 * Example:
 * .example.com    TRUE    /    FALSE    1234567890    session_id    abc123
 *
 * @param cookies Array of cookie information
 * @returns Netscape cookie jar format string
 */
export function generateNetscapeCookieJar(cookies: CookieInfo[]): string {
  if (cookies.length === 0) {
    return '# Netscape HTTP Cookie File\n# This file was generated by WebreqSniffer\n# No cookies available\n';
  }

  const lines: string[] = [
    '# Netscape HTTP Cookie File',
    '# This file was generated by WebreqSniffer',
    '# Edit at your own risk.',
    '',
  ];

  // Filter out expired cookies
  const now = Math.floor(Date.now() / 1000);
  const validCookies = cookies.filter(
    (cookie) => !cookie.expirationDate || cookie.expirationDate > now
  );

  for (const cookie of validCookies) {
    // Netscape format: domain  flag  path  secure  expiration  name  value
    // flag: TRUE if domain is for all subdomains (.example.com), FALSE otherwise
    const domain = cookie.domain;
    const flag = domain.startsWith('.') ? 'TRUE' : 'FALSE';
    const path = cookie.path;
    const secure = cookie.secure ? 'TRUE' : 'FALSE';
    // If no expiration, use a far future date (10 years from now)
    const expiration = cookie.expirationDate || now + 10 * 365 * 24 * 60 * 60;
    const name = cookie.name;
    const value = cookie.value;

    lines.push(
      `${domain}\t${flag}\t${path}\t${secure}\t${Math.floor(expiration)}\t${name}\t${value}`
    );
  }

  return lines.join('\n') + '\n';
}

/**
 * Generate JSON cookie format
 * Useful for programmatic processing
 *
 * @param cookies Array of cookie information
 * @returns JSON string
 */
export function generateJsonCookieFormat(cookies: CookieInfo[]): string {
  // Filter out expired cookies
  const now = Math.floor(Date.now() / 1000);
  const validCookies = cookies.filter(
    (cookie) => !cookie.expirationDate || cookie.expirationDate > now
  );

  return JSON.stringify(validCookies, null, 2);
}
