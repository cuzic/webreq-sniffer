/**
 * Bash Generator
 * Generates Bash scripts for downloading content (curl, yt-dlp)
 */

import type { LogEntry, LogHeaders } from '@/types';
import { escapeShellArg } from '../escapers/shell-escaper';
import { getCookiesForUrl, generateNetscapeCookieJar } from '@/lib/cookie-manager';

/**
 * Create bash script header
 */
function createBashHeader(): string[] {
  return ['#!/bin/bash', '# Generated by WebreqSniffer', ''];
}

/**
 * Format headers for curl/yt-dlp
 */
function formatHeaders(headers: LogHeaders | undefined, format: 'curl' | 'yt-dlp'): string {
  if (!headers || Object.keys(headers).length === 0) return '';

  const parts: string[] = [];
  for (const [key, value] of Object.entries(headers)) {
    const headerValue = escapeShellArg(`${key}: ${value}`);
    if (format === 'curl') {
      parts.push(` -H ${headerValue}`);
    } else {
      parts.push(` --add-header ${headerValue}`);
    }
  }
  return parts.join('');
}

/**
 * Generate Bash curl script (no headers)
 *
 * @param entries - Log entries to export
 * @returns Bash script with curl commands
 */
export function generateBashCurl(entries: LogEntry[]): string {
  const lines = createBashHeader();

  for (const entry of entries) {
    const url = escapeShellArg(entry.url);
    lines.push(`curl -L ${url}`);
  }

  return lines.join('\n') + '\n';
}

/**
 * Generate Bash curl script with headers
 *
 * @param entries - Log entries to export
 * @returns Bash script with curl commands including headers
 */
export function generateBashCurlHeaders(entries: LogEntry[]): string {
  const lines = createBashHeader();

  for (const entry of entries) {
    const url = escapeShellArg(entry.url);
    const headers = formatHeaders(entry.headers, 'curl');
    lines.push(`curl -L${headers} ${url}`);
  }

  return lines.join('\n') + '\n';
}

/**
 * Generate Bash yt-dlp script
 *
 * @param entries - Log entries to export
 * @returns Bash script with yt-dlp commands
 */
export function generateBashYtDlp(entries: LogEntry[]): string {
  const lines = createBashHeader();

  for (const entry of entries) {
    const url = escapeShellArg(entry.url);
    let command = 'yt-dlp';

    command += formatHeaders(entry.headers, 'yt-dlp');

    // Add referer if present (yt-dlp specific)
    if (entry.headers?.Referer) {
      const referer = escapeShellArg(entry.headers.Referer);
      command += ` --referer ${referer}`;
    }

    command += ` ${url}`;
    lines.push(command);
  }

  return lines.join('\n') + '\n';
}

/**
 * Generate Bash yt-dlp script with cookies
 * Creates embedded cookie jar in the script
 *
 * @param entries - Log entries to export
 * @returns Bash script with yt-dlp commands and cookie jar
 */
export async function generateBashYtDlpWithCookies(entries: LogEntry[]): Promise<string> {
  const lines = createBashHeader();

  if (entries.length === 0) {
    return lines.join('\n') + '\n';
  }

  // Collect cookies from all unique domains
  const uniqueUrls = [...new Set(entries.map((e) => e.url))];
  const allCookies = await Promise.all(uniqueUrls.map((url) => getCookiesForUrl(url)));
  const flatCookies = allCookies.flat();

  // Generate cookie jar if cookies exist
  if (flatCookies.length > 0) {
    const cookieJar = generateNetscapeCookieJar(flatCookies);

    lines.push('# Create cookie jar file');
    lines.push("cat > cookies.txt << 'COOKIE_JAR'");
    lines.push(cookieJar.trim());
    lines.push('COOKIE_JAR');
    lines.push('');
  }

  // Generate download commands
  for (const entry of entries) {
    const url = escapeShellArg(entry.url);
    let command = 'yt-dlp';

    // Add cookies if available
    if (flatCookies.length > 0) {
      command += ' --cookies cookies.txt';
    }

    command += formatHeaders(entry.headers, 'yt-dlp');

    // Add referer if present (yt-dlp specific)
    if (entry.headers?.Referer) {
      const referer = escapeShellArg(entry.headers.Referer);
      command += ` --referer ${referer}`;
    }

    command += ` ${url}`;
    lines.push(command);
  }

  // Cleanup
  if (flatCookies.length > 0) {
    lines.push('');
    lines.push('# Clean up cookie jar');
    lines.push('rm -f cookies.txt');
  }

  return lines.join('\n') + '\n';
}
